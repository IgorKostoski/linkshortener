name: Go CI and Docker Build

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_ORGANIZATION }}_${{ github.event.repository.name }}


jobs:
  test-and-lint:
    name: Test, Lint and Analyze
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN_IS_SET: ${{ secrets.SONAR_TOKEN != '' }}
      SONAR_ORGANIZATION_IS_SET: ${{ secrets.SONAR_ORGANIZATION != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Go Mod Tidy
        run: go mod tidy

      - name: Vet
        run: go vet ./...

      - name: Test with Coverage
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: SoncarCloud Scan
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && env.SONAR_TOKEN_IS_SET == 'true' && env.SONAR_ORGANIZATION_IS_SET == 'true')
        uses: SonarSource/sonarqube-scan-action@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_ORGANIZATION }}_${{ github.event.repository.name }}
            -Dsonar.sources=.
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.scm.revision=${{ github.sha }}
            -Dsonar.pullrequest.provider=github
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
  

  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Print image digest
        if: success()
        run: |
          echo "Pushed image digest: ${{ steps.build-and-push.outputs.digest }}"