name: Go CI and Docker Build

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_ORGANIZATION }}_${{ github.event.repository.name }}


jobs:
  test-and-lint:
    name: Test, Lint and Analyze
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN_IS_SET: ${{ secrets.SONAR_TOKEN != '' }}
      SONAR_ORGANIZATION_IS_SET: ${{ secrets.SONAR_ORGANIZATION != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Go Mod Tidy
        run: go mod tidy

      - name: Vet
        run: go vet ./...

      - name: Test with Coverage
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: SonarCloud Scan
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && env.SONAR_TOKEN_IS_SET == 'true' && env.SONAR_ORGANIZATION_IS_SET == 'true')
        uses: SonarSource/sonarqube-scan-action@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: 'https://sonarcloud.io'
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=IgorKostoski_linkshortener
            -Dsonar.sources=.
            -Dsonar.go.coverage.reportPaths=coverage.out
                    -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.scm.revision=${{ github.sha }}
            -Dsonar.pullrequest.provider=github
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
  

  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max



      - name: Print image digest
        if: success()
        run: |
          echo "Pushed image digest: ${{ steps.build-and-push.outputs.digest }}"
          

  deploy-to-server:
      name: Deploy to Server (Simulated for Local VM)
      runs-on: ubuntu-latest
      needs: build-and-push-docker-image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      steps:
        - name: Checkout repository (for Ansible playbooks)
          uses: actions/checkout@v4

        - name: Set up Python for Ansible
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'

        - name: Install Ansible
          run: |
            python -m pip install --upgrade pip
            pip install ansible
            ansible --version

        - name: Create a dummy inventory for local simulation
          run: |
            mkdir -p ansible_ci_temp
            echo "[servers]" > ansible_ci_temp/inventory.ini
            echo "localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python3" >> ansible_ci_temp/inventory.ini

        - name: Run Ansible Playbook (Syntax Check / Dry Run for Simulation)
          run: |
              echo "Simulating Ansible playbook run. In a real scenario, this would be the remote server."
              export ANSIBLE_HOST_KEY_CHECKING="False" # Set as env var within the shell script
              ansible-playbook -i ansible_ci_temp/inventory.ini ansible/deploy_app.yml --syntax-check
              echo "Ansible playbook ansible/deploy_app.yml would run here."
              echo "Playbook tasks for deploying app and monitoring stack would execute."



        - name: Deployment Simulation Complete
          run: echo "CD job simulation finished. Ansible playbook would never deployed the application."