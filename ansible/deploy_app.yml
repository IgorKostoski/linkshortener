---
- name: Deploy LinkShortener Application and Monitoring
  hosts: servers
  become: true
  gather_facts: true

  vars:
    app_deploy_dir: "/opt/linkshortener"
    app_image: "ghcr.io/igorkostoski/linkshortener:main"
    # Let's stick with arm64v8/postgres:15 as it's very explicit for arm64
    db_image: "arm64v8/postgres:15"

  pre_tasks: # Use pre_tasks to ensure it runs before other tasks
    - name: Ensure Python requests library is installed (for Ansible docker modules)
      ansible.builtin.dnf:
        name: python3-requests
        state: present

  tasks:
    - name: Ensure deployment directory exists
      ansible.builtin.file:
        path: "{{ app_deploy_dir }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose file to the server
      ansible.builtin.copy:
        src: ./files/docker-compose.server.yml # Path relative to ansible dir or project root with files/
        dest: "{{ app_deploy_dir }}/docker-compose.yml"
        mode: '0644'


    - name: Copy Prometheus configuration to the server
      ansible.builtin.copy:
        src: ./files/prometheus.yml
        dest: "{{ app_deploy_dir }}/prometheus.yml"
        mode: '0644'

    - name: Pull application image
      community.docker.docker_image:
        name: "{{ app_image }}"
        source: pull
        # platform: linux/arm64 # Usually not needed if image is multi-arch and daemon is arm64
      register: pull_app_result
      until: pull_app_result is succeeded # Retry if transient network issue
      retries: 3
      delay: 5

    - name: Pull database image
      community.docker.docker_image:
        name: "{{ db_image }}"
        source: pull
        # platform: linux/arm64 # Usually not needed
      register: pull_db_result
      until: pull_db_result is succeeded
      retries: 3
      delay: 5

    - name: Ensure old application services defined in compose are stopped and removed
      community.docker.docker_compose_v2: # Use v2 module
        project_src: "{{ app_deploy_dir }}"
        state: absent # This will stop and remove services defined in the compose file
        # remove_orphans: true # Optional: also removes containers not defined in the current compose file but part of the project

    - name: Pull latest images and deploy application stack with Docker Compose
      community.docker.docker_compose_v2:
        project_src: "{{ app_deploy_dir }}"
        pull: always
        state: present
        # remove_orphans: true # Optional
      register: deploy_output

    - name: Display Docker Compose deployment output
      ansible.builtin.debug:
        var: deploy_output
        verbosity: 1

    - name: List running containers (for verification)
      ansible.builtin.command: docker ps
      register: running_containers
      changed_when: false # This command doesn't change state

    - name: Display running containers
      ansible.builtin.debug:
        var: running_containers.stdout_lines